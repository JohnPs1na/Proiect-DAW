// <auto-generated />
using System;
using MYZONE.DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MYZONE.Migrations
{
    [DbContext(typeof(MyzoneContext))]
    [Migration("20220115221039_FinalVWoutUsers")]
    partial class FinalVWoutUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MYZONE.DAL.Entities.Admins", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.AnnouncementsArtistEvent", b =>
                {
                    b.Property<string>("ArtistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArtistId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Artists", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.BasicUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountCoupon")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasicUsers");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.ContactInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique()
                        .HasFilter("[AdminId] IS NOT NULL");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Events", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Tickets", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BasicUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasicUserId");

                    b.HasIndex("EventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.AnnouncementsArtistEvent", b =>
                {
                    b.HasOne("MYZONE.DAL.Entities.Artists", "Artist")
                        .WithMany("AnnouncementsArtistEvent")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MYZONE.DAL.Entities.Events", "Event")
                        .WithMany("AnnouncementsArtistEvent")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.ContactInfo", b =>
                {
                    b.HasOne("MYZONE.DAL.Entities.Admins", "Admin")
                        .WithOne("ContactInfo")
                        .HasForeignKey("MYZONE.DAL.Entities.ContactInfo", "AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Events", b =>
                {
                    b.HasOne("MYZONE.DAL.Entities.Admins", "Admin")
                        .WithMany("Events")
                        .HasForeignKey("AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Tickets", b =>
                {
                    b.HasOne("MYZONE.DAL.Entities.BasicUsers", "BasicUser")
                        .WithMany("Tickets")
                        .HasForeignKey("BasicUserId");

                    b.HasOne("MYZONE.DAL.Entities.Events", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId");

                    b.Navigation("BasicUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Admins", b =>
                {
                    b.Navigation("ContactInfo");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Artists", b =>
                {
                    b.Navigation("AnnouncementsArtistEvent");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.BasicUsers", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MYZONE.DAL.Entities.Events", b =>
                {
                    b.Navigation("AnnouncementsArtistEvent");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
